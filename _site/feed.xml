<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-07-31T17:47:31+08:00</updated><id>/feed.xml</id><title type="html">Leafee</title><subtitle>A blog based on jekyll, looking for solutiong of tags</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2019/07/31/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-07-31T17:33:52+08:00</published><updated>2019-07-31T17:33:52+08:00</updated><id>/jekyll/update/2019/07/31/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2019/07/31/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">C++迭代器易bug点</title><link href="/c++/2019/07/30/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%98%93bug%E7%82%B9.html" rel="alternate" type="text/html" title="C++迭代器易bug点" /><published>2019-07-30T15:48:48+08:00</published><updated>2019-07-30T15:48:48+08:00</updated><id>/c++/2019/07/30/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%98%93bug%E7%82%B9</id><content type="html" xml:base="/c++/2019/07/30/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%98%93bug%E7%82%B9.html">&lt;h1 id=&quot;迭代器易bug点&quot;&gt;迭代器易bug点&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;在对容器进行迭代时，尽可能避免对容器内容的修改，如确实需要修改，则一定要注意容器被修改后当前迭代器的位置是否仍然可用。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;错误代码例&quot;&gt;错误代码例&lt;/h2&gt;

&lt;p&gt;以下代码为&lt;a href=&quot;http://codeforces.com/gym/247981/problem/D&quot;&gt;一次训练赛D题&lt;/a&gt;的尝试作答，原题面为&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;输入每个人的电话号码，将其整理后输出，人名顺序可以为字母序，每个人的电话号码也可以为字母序。&lt;/p&gt;

  &lt;p&gt;规定一个人如果有多个相同号码，则视之为一个号码；如果有多个不同长度的号码，且较长的号码意较短的号码为后缀，则视较短的号码为冗余号码；有多个人共享同一个号码的情况&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;第一行输入一个数字代表接下来要输入的行数，
每行起始一个字符串代表一个人的姓名，接下来一个数字n表示后边的数字的个数，接下来n个数字代表属于这个人的电话号码们&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INPUT:
4
ivan 3 123 123 456
ivan 2 456 456
ivan 8 789 3 23 6 56 9 89 2
dasha 2 23 789

OUTPUT:
2
dasha 2 23 789 
ivan 4 789 123 2 456 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INPUT:
3
karl 2 612 12
petr 1 12
katya 1 612

OUTPUT:
3
katya 1 612 
petr 1 12 
karl 1 612 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;解题思路为使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt;&lt;/code&gt;容器，&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;以人名为键，以所有的电话号码为值，而在&lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;中，电话号码倒序存储。&lt;/p&gt;

&lt;p&gt;在遍历一个人的所有电话号码时，只需要比较相邻的两个号码，前一个是否是后一个的前缀即可，若是，则移除前一个，若否，则遍历下一个，直到倒数第二个。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;set&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// the iterator right adjacent to iu&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointToStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointToStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copyStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverseSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reverseSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverseSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverseSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上代码在自己调配的&lt;code class=&quot;highlighter-rouge&quot;&gt;VS Code&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;g++&lt;/code&gt;（on Windows）环境下会在第二个循环中&lt;code class=&quot;highlighter-rouge&quot;&gt;string tmpStr = copyStr.substr(0, iu-&amp;gt;size());&lt;/code&gt;的位置崩溃，且没有任何提示。&lt;/p&gt;

&lt;p&gt;在Visual Studio中，会以弹窗的形式报&lt;code class=&quot;highlighter-rouge&quot;&gt;cannot dereference end map/set/ iterator&lt;/code&gt;错误，报错位置是第二个循环的&lt;code class=&quot;highlighter-rouge&quot;&gt;for (set&amp;lt;string&amp;gt;::iterator iu = numbers.begin(); iu != numbers.end(); ++iu) {&lt;/code&gt;，报错条件是判断语句中的&lt;code class=&quot;highlighter-rouge&quot;&gt;numbers.erase(*iu);&lt;/code&gt; 执行后。&lt;/p&gt;

&lt;p&gt;综上，错误原因是&lt;strong&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;*iu&lt;/code&gt;的内容被移除后，迭代器&lt;code class=&quot;highlighter-rouge&quot;&gt;iu&lt;/code&gt;所指向的位置就已经失效了，再次进行自增操作则会由于操作已经销毁的内存而程序崩溃。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;修改后的代码如下，但是&lt;strong&gt;并没有AC&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;set&amp;gt;
using namespace std;

int main() {
	map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt; records;
	int n;
	cin &amp;gt;&amp;gt; n;
	while (n-- &amp;gt; 0) {
		string name, number;
		int amount;
		cin &amp;gt;&amp;gt; name &amp;gt;&amp;gt; amount;
		while (amount-- &amp;gt; 0) {
			cin &amp;gt;&amp;gt; number;
			string temp(number.rbegin(), number.rend());
			records[name].emplace(temp);
		}
	}

	for (map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt;::iterator it = records.begin(); it != records.end(); ++it) {
		set&amp;lt;string&amp;gt;&amp;amp; numbers = it-&amp;gt;second;
		for (set&amp;lt;string&amp;gt;::iterator iu = numbers.begin(); iu != numbers.end(); ) {
			set&amp;lt;string&amp;gt;::iterator iv = iu;		// the iterator right adjacent to iu
			++iv;
			if (iv != numbers.end()) {
				const string&amp;amp; pointToStr = *iv;
				string copyStr = string(pointToStr);
				string tmpStr = copyStr.substr(0, iu-&amp;gt;size());
				if (iv-&amp;gt;size() &amp;gt;= iu-&amp;gt;size() &amp;amp;&amp;amp; *iu == tmpStr)
					numbers.erase(tmpStr);
				iu = iv;			// ++iu
			} else {
				break;
			}
		}
		set&amp;lt;string&amp;gt; reverseSet;
		reverseSet.swap(numbers);
		for (set&amp;lt;string&amp;gt;::iterator iw = reverseSet.begin(); iw != reverseSet.end(); ++iw)
			numbers.emplace(string(iw-&amp;gt;rbegin(), iw-&amp;gt;rend()));
	}

	for (auto it = records.begin(); it != records.end(); ++it) {
		cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; ' ' &amp;lt;&amp;lt; it-&amp;gt;second.size() &amp;lt;&amp;lt; ' ';
		for (set&amp;lt;string&amp;gt;::iterator iu = it-&amp;gt;second.begin(); iu != it-&amp;gt;second.end(); ++iu)
			cout &amp;lt;&amp;lt; *iu &amp;lt;&amp;lt; ' ';
		cout &amp;lt;&amp;lt; endl;
	}

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><category term="c++" /><summary type="html">迭代器易bug点 在对容器进行迭代时，尽可能避免对容器内容的修改，如确实需要修改，则一定要注意容器被修改后当前迭代器的位置是否仍然可用。 错误代码例 以下代码为一次训练赛D题的尝试作答，原题面为 输入每个人的电话号码，将其整理后输出，人名顺序可以为字母序，每个人的电话号码也可以为字母序。 规定一个人如果有多个相同号码，则视之为一个号码；如果有多个不同长度的号码，且较长的号码意较短的号码为后缀，则视较短的号码为冗余号码；有多个人共享同一个号码的情况 第一行输入一个数字代表接下来要输入的行数， 每行起始一个字符串代表一个人的姓名，接下来一个数字n表示后边的数字的个数，接下来n个数字代表属于这个人的电话号码们 INPUT: 4 ivan 3 123 123 456 ivan 2 456 456 ivan 8 789 3 23 6 56 9 89 2 dasha 2 23 789 OUTPUT: 2 dasha 2 23 789 ivan 4 789 123 2 456 INPUT: 3 karl 2 612 12 petr 1 12 katya 1 612 OUTPUT: 3 katya 1 612 petr 1 12 karl 1 612 解题思路为使用一个map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt;容器，map以人名为键，以所有的电话号码为值，而在set中，电话号码倒序存储。 在遍历一个人的所有电话号码时，只需要比较相邻的两个号码，前一个是否是后一个的前缀即可，若是，则移除前一个，若否，则遍历下一个，直到倒数第二个。 #include &amp;lt;iostream&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;set&amp;gt; using namespace std; int main() { map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt; records; int n; cin &amp;gt;&amp;gt; n; while (n-- &amp;gt; 0) { string name, number; int amount; cin &amp;gt;&amp;gt; name &amp;gt;&amp;gt; amount; while (amount-- &amp;gt; 0) { cin &amp;gt;&amp;gt; number; string temp(number.rbegin(), number.rend()); records[name].emplace(temp); } } for (map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt;::iterator it = records.begin(); it != records.end(); ++it) { set&amp;lt;string&amp;gt; &amp;amp; numbers = it-&amp;gt;second; for (set&amp;lt;string&amp;gt;::iterator iu = numbers.begin(); iu != numbers.end(); ++iu) { set&amp;lt;string&amp;gt;::iterator iv = iu; // the iterator right adjacent to iu if (iv != numbers.end()) { ++iv; const string &amp;amp; pointToStr= *iv; string copyStr = string(pointToStr); string tmpStr = copyStr.substr(0, iu-&amp;gt;size()); if (iv-&amp;gt;size() &amp;gt;= iu-&amp;gt;size() &amp;amp;&amp;amp; (*iu == tmpStr)) numbers.erase(*iu); } } set&amp;lt;string&amp;gt; reverseSet; reverseSet.swap(numbers); for (set&amp;lt;string&amp;gt;::iterator iw = reverseSet.begin(); iw != reverseSet.end(); ++iw) numbers.emplace(string(iw-&amp;gt;rbegin(), iw-&amp;gt;rend())); } for (auto it = records.begin(); it != records.end(); ++it) { cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; ' ' &amp;lt;&amp;lt; it-&amp;gt;second.size(); for (set&amp;lt;string&amp;gt;::iterator iu = it-&amp;gt;second.begin(); iu != it-&amp;gt;second.end(); ++iu) cout &amp;lt;&amp;lt; *iu &amp;lt;&amp;lt; ' '; cout &amp;lt;&amp;lt; endl; } return 0; } 以上代码在自己调配的VS Code + g++（on Windows）环境下会在第二个循环中string tmpStr = copyStr.substr(0, iu-&amp;gt;size());的位置崩溃，且没有任何提示。 在Visual Studio中，会以弹窗的形式报cannot dereference end map/set/ iterator错误，报错位置是第二个循环的for (set&amp;lt;string&amp;gt;::iterator iu = numbers.begin(); iu != numbers.end(); ++iu) {，报错条件是判断语句中的numbers.erase(*iu); 执行后。 综上，错误原因是当*iu的内容被移除后，迭代器iu所指向的位置就已经失效了，再次进行自增操作则会由于操作已经销毁的内存而程序崩溃。 修改后的代码如下，但是并没有AC #include &amp;lt;iostream&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;set&amp;gt; using namespace std; int main() { map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt; records; int n; cin &amp;gt;&amp;gt; n; while (n-- &amp;gt; 0) { string name, number; int amount; cin &amp;gt;&amp;gt; name &amp;gt;&amp;gt; amount; while (amount-- &amp;gt; 0) { cin &amp;gt;&amp;gt; number; string temp(number.rbegin(), number.rend()); records[name].emplace(temp); } } for (map&amp;lt;string, set&amp;lt;string&amp;gt;&amp;gt;::iterator it = records.begin(); it != records.end(); ++it) { set&amp;lt;string&amp;gt;&amp;amp; numbers = it-&amp;gt;second; for (set&amp;lt;string&amp;gt;::iterator iu = numbers.begin(); iu != numbers.end(); ) { set&amp;lt;string&amp;gt;::iterator iv = iu; // the iterator right adjacent to iu ++iv; if (iv != numbers.end()) { const string&amp;amp; pointToStr = *iv; string copyStr = string(pointToStr); string tmpStr = copyStr.substr(0, iu-&amp;gt;size()); if (iv-&amp;gt;size() &amp;gt;= iu-&amp;gt;size() &amp;amp;&amp;amp; *iu == tmpStr) numbers.erase(tmpStr); iu = iv; // ++iu } else { break; } } set&amp;lt;string&amp;gt; reverseSet; reverseSet.swap(numbers); for (set&amp;lt;string&amp;gt;::iterator iw = reverseSet.begin(); iw != reverseSet.end(); ++iw) numbers.emplace(string(iw-&amp;gt;rbegin(), iw-&amp;gt;rend())); } for (auto it = records.begin(); it != records.end(); ++it) { cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; ' ' &amp;lt;&amp;lt; it-&amp;gt;second.size() &amp;lt;&amp;lt; ' '; for (set&amp;lt;string&amp;gt;::iterator iu = it-&amp;gt;second.begin(); iu != it-&amp;gt;second.end(); ++iu) cout &amp;lt;&amp;lt; *iu &amp;lt;&amp;lt; ' '; cout &amp;lt;&amp;lt; endl; } return 0; }</summary></entry><entry><title type="html">shell符号总结【上】</title><link href="/linux/2019/07/20/shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="shell符号总结【上】" /><published>2019-07-20T15:46:09+08:00</published><updated>2019-07-20T15:46:09+08:00</updated><id>/linux/2019/07/20/shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="/linux/2019/07/20/shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;h3 id=&quot;关于符号&quot;&gt;关于符号&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 美元符号, 一般用于取变量的值, 不过总觉得和命令代换有很多相似之处, 具体可见样例, 另外美元符号也会和其他符号产生有意思的组合.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo hello&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ $var&lt;/span&gt;
  hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; 相当于test命令, 用于测试条件是否成立, 若成立则退出值为0(真), 由于if, for, case等结构语句通过上一条命令的退出值来决定运行流程, 因此方括号多用于这些结构语句中.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$()&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;` `&lt;/code&gt; 两种用法相同, 均是命令代换, 即取所包含的命令的输出作为文本值参与运行, 文本值甚至可以是命令, 如直接运行&lt;code class=&quot;highlighter-rouge&quot;&gt;`echo pwd`&lt;/code&gt;则相当于直接运行&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$[]&lt;/code&gt; 对于此命令需要提前了解双反引号(上一条), 以及&lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;命令, &lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;官方描述为&lt;em&gt;Print the value of EXPRESSION to standard output&lt;/em&gt;, 所以可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;expr&lt;/code&gt;命令做命令代换, 于是&lt;code class=&quot;highlighter-rouge&quot;&gt;$[]&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt; `expr expression`&lt;/code&gt;效果相同, 样例如下.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr &lt;/span&gt;1 + 1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;1 + 1]
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var2&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;不过有一点奇怪的是, 以下命令的运行结果并不能如我所愿输出&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;, 不过至少反引号和美元符号加方括号的行为是一样的, 仍然支持我的猜想.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo hello&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias
  alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'echo hello'&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expr &lt;/span&gt;1 + 1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
  bash: 2: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found
  &lt;span class=&quot;nv&quot;&gt;$ $[&lt;/span&gt;1 + 1]
  bash: 2: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; 可用于分隔命令, 书本上翻译为命令列表, 一般来说, 命令与命令之间通过换行符来进行分隔, 但是有时为了追求代码的紧凑会希望将几条命令放在同一行, 于是这便是分号的用途.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; expression &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; 用于表示数组, 数组样例见下一个符号的样例, 也用于进程列表, 进程列表中的命令会被开一个子shell运行, 进程列表样例如下.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BASH_SUBSHELL&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# 当前子shell水平为0&lt;/span&gt;
  0
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BASH_SUBSHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;	        &lt;span class=&quot;c&quot;&gt;# 当前子shell水平为0&lt;/span&gt;
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;那么之前的命令代换中的括号是否也会被开一个子shell呢,&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BASH_SUBSHELL&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# 当前子shell水平为0&lt;/span&gt;
  0
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BASH_SUBSHELL&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# 命令代换中子shell水平为1&lt;/span&gt;
  1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;猜想得证.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${}&lt;/code&gt; 此符号用于取数组的值, 需要注意的一点是, 当数组中某一个位置的值被&lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt;之后, 该位置后面的值并不会自动向前移动一个序号, 可见样例.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt; 1 2 3 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[2]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  3
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;arr[1]
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[2]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  3
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[1]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
                                  &lt;span class=&quot;c&quot;&gt;#空行, 无输出&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[ ]]&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(( ))&lt;/code&gt; 双方括号是拓展字符运算, 双圆括号是拓展数学运算, 其中拓展数学运算可支持移位操作,自增操作等高级操作, 拓展字符运算可支持通配符匹配.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;;;&lt;/code&gt; 双分号用于case的匹配中, 与单分号不同的是, 单分号只能结束当前命令, 后续仍被认为是这一块的可执行语句, 不能接下一个匹配条件, 只有以双分号结尾, 才能接下一个匹配&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;caseExample.sh
&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;1 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 2 &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;2 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
3 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 4 &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;3 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;4 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./caseExample.sh
1
2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关于结构化语句&quot;&gt;关于结构化语句&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 判断语句&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;判断的方法只是简单地根据上一命令的返回值来判断执行结构, 关于这一点, 其实最常用的方括号只是&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;命令, 这一点在上面符号的部分有提及. 通常用法是&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;command1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;command2
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;以上用法中, &lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;是任意一个可执行的shell命令, &lt;code class=&quot;highlighter-rouge&quot;&gt;command2&lt;/code&gt;是条件为真则执行的语句体, 最后&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;语句使用&lt;code class=&quot;highlighter-rouge&quot;&gt;fi&lt;/code&gt;进行结尾. 需要注意的是, &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;的返回值若是&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;则&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;判断为真, 非&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;则判断为假&lt;/strong&gt;, 这一点与许多类C语言恰恰相反. 另外, &lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;是按照通常的命令执行方式执行的, 所以如果&lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;命令有输出, 则会直接输出在控制台中.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;语句也可以在条件为假的时候执行语句, 方法是在结尾&lt;code class=&quot;highlighter-rouge&quot;&gt;fi&lt;/code&gt;之前加入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;; 当然&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;也可以判断多个条件进行筛选, 方法是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;elfi&lt;/code&gt;, 样例如下&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;command1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;command2
  &lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;command3 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;command4
  &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;command5
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;为了代码紧凑, 有时候会在判断命令之后使用分号进行分隔, 并把&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;放在同一行的之后&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;​    &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;语句中也可以使用逻辑运算符, 和其他许多类C语言类似, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;, 分别作为与,或,非. 这些逻辑运算符可以用在&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;命令和普通命令之中. 需要注意的是, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;手册中并没有&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;的表述, 不过这些仍然被支持, 因为在shell中, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;的行为是若该符号之前的命令运行的返回值为&lt;strong&gt;真&lt;/strong&gt;, 则执行下一条命令, &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;的行为是若该符号之前的命令运行返回值为&lt;strong&gt;假&lt;/strong&gt;, 则执行下一条命令, 这个被称为”短路”, 在C语言中同样适用. 
​    所以如此来看的话, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;command1 &amp;amp;&amp;amp; command2&lt;/code&gt;的作为分析, 如果&lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;返回值为真, 则执行&lt;code class=&quot;highlighter-rouge&quot;&gt;command2&lt;/code&gt;, 此时整个逻辑表达式的值就由&lt;code class=&quot;highlighter-rouge&quot;&gt;command2&lt;/code&gt;的返回值决定, 若&lt;code class=&quot;highlighter-rouge&quot;&gt;command2&lt;/code&gt;的返回值也为真, 则最后&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;的值就是真, 反之则假. 若&lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;返回值为假, 则短路, 最终整个逻辑运算的结果就是&lt;code class=&quot;highlighter-rouge&quot;&gt;command1&lt;/code&gt;的返回值–假. 原因是逻辑运算符的作用仅仅是决定是否进行短路, 而且条件判断依据仅仅是之前运行的最后一条命令的返回值, 于是整个逻辑运算十分顺利. 或运算同理. 
​    至于非运算, 叹号&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;其实也是一条命令, 这一点可以在终端不输入任何字符的情况下敲入双tab, 使其打印所有的可执行命令, 其中第一条就是&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;. 样例如下&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
hello
1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
hello
&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;
0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;特殊变量&quot;&gt;特殊变量&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$$&lt;/td&gt;
      &lt;td&gt;当前shell进程的PID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$?&lt;/td&gt;
      &lt;td&gt;上一命令运行的返回值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$#&lt;/td&gt;
      &lt;td&gt;命令行脚本传递参数的个数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$@&lt;/td&gt;
      &lt;td&gt;作为数组(雾)获取全部命令行参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$*&lt;/td&gt;
      &lt;td&gt;作为一整条字符串获取全部命令行参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$0&lt;/td&gt;
      &lt;td&gt;当前shell脚本的运行名(脚本的绝对路径或者相对路径)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$n&lt;/td&gt;
      &lt;td&gt;shell脚本的第n个参数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="linux" /><summary type="html">关于符号</summary></entry></feed>